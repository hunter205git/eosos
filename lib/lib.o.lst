     1                                  [section .text]
     2                                  
     3                                  extern _disp_pos
     4                                  extern _scrollup
     5                                  extern _endLine
     6                                  
     7                                  global _print_str
     8                                  global _print_color_str
     9                                  global _memcpy
    10                                  global _init_8259A
    11                                  global _out_byte
    12                                  global _cleanline
    13                                  global _movScrnChar
    14                                  global _strcpy
    15                                  
    16                                  ;--------------------------------------------------------------
    17                                  ; void print_str(char * string)
    18                                  ;--------------------------------------------------------------
    19                                  _print_str:
    20 00000000 55                      	push ebp				; create stack frame
    21 00000001 89E5                    	mov ebp, esp
    22 00000003 8B7508                  	mov esi, [ebp + 8]		; skip old EIP and grab the first argument (string pointer)
    23 00000006 8B3D[00000000]          	mov edi, [_disp_pos]		; get cursor position
    24 0000000C B40F                    	mov ah, 0Fh				; set the char color
    25                                  .1:
    26 0000000E AC                      	lodsb					; loads a byte from [DS:ESI] into AL
    27 0000000F 84C0                    	test al,al
    28 00000011 7431                    	jz		.3				; jump if ZF ==1
    29 00000013 3C0A                    	cmp al, 0Ah				; check if it's "\n"
    30 00000015 7513                    	jnz .2					; jump if not "\n"
    31 00000017 893D[00000000]          	mov 	[_disp_pos], edi
    32 0000001D E8(00000000)            	call _endLine
    33 00000022 8B3D[00000000]          	mov edi, [_disp_pos]
    34 00000028 EBE4                    	jmp .1
    35                                  .2:
    36 0000002A 65668907                	mov		[gs:edi], ax	; print the char(with color) in ax
    37 0000002E 83C702                  	add 	edi,2			; move to next 2 bytes in VGA memory
    38                                  	;Needs scroll up or not----------------------------------------
    39 00000031 81FF9E0F0000            	cmp 	edi,3998
    40 00000037 76D5                    	jbe		.1				; jump if edi <= 3998
    41 00000039 E8(00000000)            	call	_scrollup		; else scroll the screen
    42 0000003E 8B3D[00000000]          	mov		edi, [_disp_pos]	;get cursor position
    43                                  	;--------------------------------------------------------------
    44                                  .3:	
    45 00000044 893D[00000000]          	mov 	[_disp_pos], edi	; Save the cursor
    46 0000004A 89FB                    	mov ebx,edi
    47 0000004C 5D                      	pop     ebp             ; restore the base pointer
    48 0000004D C3                          ret
    49                                  	
    50                                  ;--------------------------------------------------------------
    51                                  ; void print_color_str(char * string, int text_color)
    52                                  ;--------------------------------------------------------------
    53                                  _print_color_str:
    54 0000004E 55                      	push ebp				; create stack frame
    55 0000004F 89E5                    	mov ebp, esp
    56                                  	
    57 00000051 8B7508                  	mov esi, [ebp + 8]		; grab the first argument (string pointer)
    58 00000054 8A650C                  	mov ah, [ebp + 12]		; grab the second argument (text color)
    59 00000057 8B3D[00000000]          	mov edi, [_disp_pos]		; get cursor position
    60                                  .1:
    61 0000005D AC                      	lodsb					; loads a byte from [DS:ESI] into AL
    62 0000005E 84C0                    	test al,al
    63 00000060 7431                    	jz		.3				; jump if ZF ==1
    64 00000062 3C0A                    	cmp al, 0Ah				; check if it's "\n"
    65 00000064 7513                    	jnz .2					; jump if not "\n"
    66 00000066 893D[00000000]          	mov 	[_disp_pos], edi
    67 0000006C E8(00000000)            	call _endLine
    68 00000071 8B3D[00000000]          	mov edi, [_disp_pos]
    69 00000077 EBE4                    	jmp .1
    70                                  .2:
    71 00000079 65668907                	mov		[gs:edi], ax	; print the char(with color) in ax
    72 0000007D 83C702                  	add 	edi,2			; move to next 2 bytes in VGA memory
    73                                  	;Needs scroll up or not----------------------------------------
    74 00000080 81FF9E0F0000            	cmp 	edi,3998
    75 00000086 76D5                    	jbe		.1				; jump if edi <= 3998
    76                                  	;call	_scrollup		; else scroll the screen
    77 00000088 BF40060000              	mov  edi,1600
    78 0000008D 893D[00000000]          	mov	[_disp_pos], edi 	;get cursor position
    79                                  	;--------------------------------------------------------------
    80                                  .3:	
    81 00000093 893D[00000000]          	mov 	[_disp_pos], edi	; Save the cursor
    82 00000099 5D                      	pop     ebp             ; restore the base pointer
    83 0000009A C3                          ret
    84                                  
    85                                  ;--------------------------------------------------------------
    86                                  ; void* memcpy(void* es:ptr_dst, void* ds:ptr_src, int size);
    87                                  ;--------------------------------------------------------------
    88                                  _memcpy:
    89 0000009B 55                      	push	ebp
    90 0000009C 89E5                    	mov	ebp, esp
    91                                  
    92 0000009E 56                      	push	esi
    93 0000009F 57                      	push	edi
    94 000000A0 51                      	push	ecx
    95                                  
    96 000000A1 8B7D08                  	mov	edi, [ebp + 8]	; Destination
    97 000000A4 8B750C                  	mov	esi, [ebp + 12]	; Source
    98 000000A7 8B4D10                  	mov	ecx, [ebp + 16]	; Counter
    99                                  .1:
   100 000000AA 83F900                  	cmp	ecx, 0		; 判斷計數器
   101 000000AD 740B                    	jz	.2		; 計數器為零時跳出
   102                                  
   103 000000AF 3E8A06                  	mov	al, [ds:esi]		
   104 000000B2 46                      	inc	esi			
   105                                  					; 逐字元移動
   106 000000B3 268807                  	mov	byte [es:edi], al
   107 000000B6 47                      	inc	edi
   108                                  
   109 000000B7 49                      	dec	ecx		; 計數器減一
   110 000000B8 EBF0                    	jmp	.1		; 循環
   111                                  .2:
   112 000000BA 8B4508                  	mov	eax, [ebp + 8]	; 返回值
   113                                  
   114 000000BD 59                      	pop	ecx
   115 000000BE 5F                      	pop	edi
   116 000000BF 5E                      	pop	esi
   117 000000C0 89EC                    	mov	esp, ebp
   118 000000C2 5D                      	pop	ebp
   119                                  
   120 000000C3 C3                      	ret
   121                                  	
   122                                  ;-----------------------------------------------------------
   123                                  ;void strcpy(char* p_dst, char* p_src)
   124                                  ;-----------------------------------------------------------
   125                                  _strcpy:
   126 000000C4 55                      	push ebp
   127 000000C5 89E5                    	mov ebp,esp
   128                                  	
   129 000000C7 8B7D08                  	mov edi,[ebp+8] ;source
   130 000000CA 8B750C                  	mov esi,[ebp+12] ;destination
   131                                  .1:	
   132 000000CD AC                      	lodsb
   133 000000CE 84C0                    	test al,al
   134 000000D0 7406                    	jz .2
   135 000000D2 3E8807                  	mov byte [ds:edi],al
   136 000000D5 47                      	inc edi
   137 000000D6 EBF5                    	jmp .1
   138                                  .2:
   139 000000D8 5D                      	pop ebp
   140                                  	
   141 000000D9 C3                      	ret
   142                                  
   143                                  ;-----------------------------------------------------------
   144                                  ;void init_8258A();
   145                                  ;-----------------------------------------------------------
   146                                  _init_8259A:
   147 000000DA B011                    	mov	al, 011h
   148 000000DC E620                    	out	020h, al	; 主8259, ICW1.
   149 000000DE E84D000000              	call	io_delay    
   150                                                              
   151 000000E3 E6A0                    	out	0A0h, al	; 從8259, ICW1.
   152 000000E5 E846000000              	call	io_delay    
   153                                                              
   154 000000EA B020                    	mov	al, 020h	; IRQ0 對應中斷向量 0x20
   155 000000EC E621                    	out	021h, al	; 主8259, ICW2.
   156 000000EE E83D000000              	call	io_delay    
   157                                                              
   158 000000F3 B028                    	mov	al, 028h	; IRQ8 對應中斷向量 0x28
   159 000000F5 E6A1                    	out	0A1h, al	; 從8259, ICW2.
   160 000000F7 E834000000              	call	io_delay    
   161                                                              
   162 000000FC B004                    	mov	al, 004h	; IR2 對應從8259
   163 000000FE E621                    	out	021h, al	; 主8259, ICW3.
   164 00000100 E82B000000              	call	io_delay    
   165                                                              
   166 00000105 B002                    	mov	al, 002h	; 對應主8259的 IR2
   167 00000107 E6A1                    	out	0A1h, al	; 從8259, ICW3.
   168 00000109 E822000000              	call	io_delay    
   169                                                              
   170 0000010E B001                    	mov	al, 001h    
   171 00000110 E621                    	out	021h, al	; 主8259, ICW4.
   172 00000112 E819000000              	call	io_delay    
   173                                                              
   174 00000117 E6A1                    	out	0A1h, al	; 從8259, ICW4.
   175 00000119 E812000000              	call	io_delay
   176                                  
   177 0000011E B0FE                    	mov	al, 11111110b	; 僅僅開啟定時器中斷
   178 00000120 E621                    	out	021h, al	; 主8259, OCW1.
   179 00000122 E809000000              	call	io_delay
   180                                  
   181 00000127 B0FF                    	mov	al, 11111111b	; 屏蔽從8259所有中斷
   182 00000129 E6A1                    	out	0A1h, al	; 從8259, OCW1.
   183 0000012B E800000000              	call	io_delay
   184                                  	
   185                                  io_delay:
   186 00000130 90                      	nop
   187 00000131 90                      	nop
   188 00000132 90                      	nop
   189 00000133 90                      	nop
   190 00000134 C3                      	ret
   191                                  	
   192                                  ;-------------------------------------------------------
   193                                  ;void out_byte()
   194                                  ;-------------------------------------------------------
   195                                  _out_byte:
   196 00000135 8B542404                	mov	edx, [esp + 4]		; port
   197 00000139 8A442408                	mov	al, [esp + 4 + 4]	; value
   198 0000013D EE                      	out	dx, al
   199 0000013E 90                      	nop
   200 0000013F 90                      	nop
   201 00000140 C3                      	ret
   202                                  	
   203                                  ;-------------------------------------------------------
   204                                  ;-------------------------------------------------------
   205                                  _cleanline: ;clean the last line of screen
   206 00000141 BF000F0000              	mov		edi, (80*24+0)*2	; set edi to the last line of screen
   207                                  .1:
   208 00000146 66B80000                	mov 	ax,0
   209 0000014A 65668907                	mov		[gs:edi],ax		; print nothing
   210 0000014E 83C702                  	add		edi,2			; move to next 2 bytes in VGA memory to print next char
   211 00000151 81FF9E0F0000            	cmp		edi,3998		; if edi reach the last char on screen
   212 00000157 7702                    	ja		.2				; jmp if yes
   213 00000159 EBEB                    	jmp		.1
   214                                  .2:
   215 0000015B B8000F0000              	mov		eax,3840
   216 00000160 A3[00000000]            	mov		[_disp_pos], eax	; Save the cursor
   217 00000165 C3                      	ret
   218                                  	
   219                                  _movScrnChar: ;scroll the screen up
   220 00000166 55                      	push    ebp             ; create stack frame
   221 00000167 89E5                        mov     ebp, esp
   222 00000169 8B4508                      mov     eax, [ebp+8]    ; grab the first argument
   223 0000016C 8B5D0C                  	mov		ebx, [ebp+12]	; grab the second argument (char with color)
   224 0000016F 65668B3B                	mov		di, [gs:ebx]	; get the char
   225 00000173 65668938                	mov		[gs:eax],di		; print the char to the upper line
   226 00000177 5D                      	pop     ebp             ; restore the base pointer
   227 00000178 C3                          ret
